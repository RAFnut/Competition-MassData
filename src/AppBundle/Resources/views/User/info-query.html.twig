{# dobijas podatke u promenljivoj query #}
<!doctype>
<html>
    <head>
        {% include 'AppBundle:Templates:required-css.html.twig' %}
        <link href="{{ asset('bundles/app/css/infoquery.css') }}" rel="stylesheet">
    </head>

    <body>
        
        <nav class="navbar navbar-default">
          <div class="container-fluid">
            <div class="navbar-header">
            <div class="logo-holder">
                <a href="{{path('profile')}}"><img src="{{ asset('bundles/app/img/logo.png') }}"></a>
            </div>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">


              <ul class="nav navbar-nav navbar-right">

                <li><a href="{{path('profile')}}"><button type="submit" class="btn btn-navigation">Home</button></a></li>
                {% if premium == true %}
                    <li><a href="{{ path('premium_jobs_list') }}"><button type="submit"id="active" class="btn btn-navigation">Tracking</button></a></li>
                {% endif %}
                <li><a href="{{path('premium_queries_list')}}"><button type="submit" class="btn btn-navigation">History</button></a></li>
                {% if premium == false %}
                    <li><a href="{{path('get_premium')}}"><button type="submit" class="btn btn-navigation btn-navigation-pay">Payment</button></a></li>
                {% endif %}
                <li><a href="{{path('logout')}}"><button type="submit" class="btn btn-navigation">Log out</button></a></li>
              </ul>
            </div>
          </div>
        </nav>

        <div class="row">
           <div class="mapholder-info-kveri">
            <div class="col-md-6">
                <h1 class="title-map">Good Tweets:</h1>
                <div style="height: 350px;" id="GoodMap"></div> 
                <div id="GoodTweets"></div>

            </div>
            <div class="col-md-6">
                <h1 class="title-map">Bad Tweets:</h1>
                <div style="height: 350px;" id="BadMap"></div> 
                <div id="BadTweets"></div>
            </div>      
            </div>      
        </div>
        

        <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true"></script>
        {% include 'AppBundle:Templates:required-js.html.twig' %}
        <script type="text/javascript" src="{{ asset('bundles/app/js/mapsHelper.js') }}"></script>

        <script type="text/javascript">
        /*Helperi*/
        String.prototype.parseURL = function() {
            return this.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&~\?\/.=]+/g, function(url) {
                return url.link(url);
            });
        };

        String.prototype.parseUsername = function() {
            return this.replace(/[@]+[A-Za-z0-9-_]+/g, function(u) {
                var username = u.replace("@","")
                return u.link("http://twitter.com/"+username);
            });
        };

        String.prototype.parseHashtag = function() {
            return this.replace(/[#]+[A-Za-z0-9-_]+/g, function(t) {
                var tag = t.replace("#","%23")
                return t.link("https://twitter.com/search?q="+tag);
            });
        };

        var styleArray = [{"featureType":"administrative","elementType":"labels.text.fill","stylers":[{"color":"#444444"}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},{"featureType":"road.highway","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#46bcec"},{"visibility":"on"}]}];
            var dataGood = [];
            var dataBad = [];
            {% for tweet in query.tweet %}
                {% if tweet.impression >= 0.0 %}
                dataGood.push({
                    text: "{{tweet.text|replace({"\n":' ', "\r":' '})}}",
                    lat: "{{tweet.lat}}",
                    lng: "{{tweet.lng}}",
                    score: "{{tweet.impression}}"
                    }
                    );
                {% else %}
                dataBad.push({
                    text: "{{tweet.text|replace({"\n":' ', "\r":' '})}}",
                    lat: "{{tweet.lat}}",
                    lng: "{{tweet.lng}}",
                    score: "{{tweet.impression}}"
                    }
                    );                
                {% endif %}
            {% endfor %}    
            function generateGood(){
                var styledMap = new google.maps.StyledMapType(styleArray,{name: "Styled Map"});
                var allGoodMarkers = [];
                var mapGood;
                var boundsGood = new google.maps.LatLngBounds();
                var mapOptionsGood = {
                    zoom: 8,
                    mapTypeControlOptions: {
                      mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
                    }
                };

                mapGood = new google.maps.Map(document.getElementById("GoodMap"), mapOptionsGood);
                mapGood.setTilt(45);
                
                mapGood.mapTypes.set('map_style', styledMap);
                mapGood.setMapTypeId('map_style');

                for( i = 0; i < dataGood.length; i++ ) {
                var position = new google.maps.LatLng(dataGood[i].lat,dataGood[i].lng);
                boundsGood.extend(position);

                markerGood = new google.maps.Marker({
                    position: position
                });

                allGoodMarkers.push(markerGood);
                var infoWindow = new google.maps.InfoWindow(), markerGood, i;

                google.maps.event.addListener(markerGood, 'click', (function(marker, i) {
                    return function() {
                        var content;

                        content = "<p>"+dataGood[i].text+"</p> <p> Sentiment score: "+dataGood[i].score+"</p>";
                        infoWindow.setContent(content);
                        infoWindow.open(mapGood, marker);
                    }
                })(markerGood, i));
                mapGood.fitBounds(boundsGood);                    
                }
                var markerCluster = new MarkerClusterer(mapGood, allGoodMarkers);

            }
            generateGood();
            function generateBad(){
                var styledMap = new google.maps.StyledMapType(styleArray,{name: "Styled Map"});
                var allBadMarkers = [];
                var mapBad;
                var boundsBad = new google.maps.LatLngBounds();
                var mapOptionsBad = {
                    zoom: 8,
                    mapTypeControlOptions: {
                      mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
                    }
                };

                mapBad = new google.maps.Map(document.getElementById("BadMap"), mapOptionsBad);
                mapBad.setTilt(45);
                
                mapBad.mapTypes.set('map_style', styledMap);
                mapBad.setMapTypeId('map_style');

                for( i = 0; i < dataBad.length; i++ ) {
                var position = new google.maps.LatLng(dataBad[i].lat,dataBad[i].lng);
                boundsBad.extend(position);

                markerBad = new google.maps.Marker({
                    position: position
                });

                allBadMarkers.push(markerBad);
                var infoWindow = new google.maps.InfoWindow(), markerBad, i;

                google.maps.event.addListener(markerBad, 'click', (function(marker, i) {
                    return function() {
                        var content;

                        content = "<p>"+dataBad[i].text+"</p> <p> Sentiment score: "+dataBad[i].score+"</p>";
                        infoWindow.setContent(content);
                        infoWindow.open(mapBad, marker);
                    }
                })(markerBad, i));
                mapBad.fitBounds(boundsBad);                    
                }
                var markerCluster2 = new MarkerClusterer(mapBad, allBadMarkers);

            }           
            generateBad();

            function sortGoodSentiments(){
                var goodStuff = dataGood;
                for(i=0; i < goodStuff .length-1; i++){
                    for(j=i+1; j<goodStuff .length; j++){
                        if (goodStuff [i].score < goodStuff [j].score){
                            temp = goodStuff [i];
                            goodStuff [i] = goodStuff [j];
                            goodStuff [j] = temp;

                        }
                    }
                } 
                var content = "";
                for(i=0; i<4; i++){
                    content = content + "<p> Comment: " + goodStuff[i].text.parseURL().parseUsername().parseHashtag() + " with sentiment <strong>" + goodStuff[i].score + "</strong></p>"; 
                }
                content = content + "<a href='{{path('filter',{'id':query.id, 'sent':'1', 'vreme': '3', 'popular' : '3' })}}'>See more tweets </a>";
                $("#GoodTweets").append(content);
            }

            sortGoodSentiments();

                function sortBadSentiments(){
                var badStuff = dataBad;
                for(i=0; i < badStuff.length-1; i++){
                    for(j=i+1; j<badStuff.length; j++){
                        if (badStuff[i].score < badStuff[j].score){
                            temp = badStuff[i];
                            badStuff[i] = badStuff[j];
                            badStuff[j] = temp;

                        }
                    }
                } 
                var content = "";
                for(i=0; i<4; i++){

                    content = content + "<p> Comment: " + badStuff[i].text.parseURL().parseUsername().parseHashtag() + " with sentiment <strong>" + badStuff[i].score + "</strong></p>"; 
                }
                content = content + "<a href='{{path('filter',{'id':query.id, 'sent':'2', 'vreme': '3', 'popular' : '3' })}}'>See more tweets</a>";
                $("#BadTweets").append(content);
            }

            sortBadSentiments();

        </script>
 


    </body>
</html>